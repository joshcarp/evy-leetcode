// 567. Permutation in String
// Solved
// Medium
// Topics
// Companies
// Hint
// Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
// In other words, return true if one of s1's permutations is the substring of s2.
// Example 1:
// Input: s1 = "ab", s2 = "eidbaooo"
// Output: true
// Explanation: s2 contains one permutation of s1 ("ba").
// Example 2:
// Input: s1 = "ab", s2 = "eidboaoo"
// Output: false
// Constraints:
// 1 <= s1.length, s2.length <= 104
// s1 and s2 consist of lowercase English letters.

func checkInclusion:bool s1:string s2:string
    s1count:{}num
    s2count:{}num
    for i := range (len s1)
        if !(has s1count s1[i])
            s1count[s1[i]] = 0
            s2count[s2[i]] = 0
        end
        s1count[s1[i]] = s1count[s1[i]] + 1
        s2count[s2[i]] = s2count[s2[i]] + 1
    end
    l := 0
    while l + (len s1) < (len s2)
        if s1count == s2count
            return true
        end
        start := s2[l] // The character at the start of the current window. To be removed
        finish := s2[l + (len s1)] // the character after the end of the current window. To be added
        s2count[start] = s2count[start] - 1
        if s2count[start] == 0
            del s2count start
        end
        if !(has s2count finish)
            s2count[finish] = 0
        end
        s2count[finish] = s2count[finish] + 1
        l = l + 1
    end
    return s1count == s2count

end

fails := 0
total := 0

func assert want:any got:any
    total = total + 1
    if want != got
        fails = fails + 1
        printf "want != got: want %v got %v\n" want got
    end
end

func finished
    printf "%v of %v tests passed\n" (total - fails) total
end

// -- Test Cases Start -- //
assert true (checkInclusion "ab" "ab")
assert true (checkInclusion "ab" "eidbaooo")
assert false (checkInclusion "ab" "eidboaoo")
// // -- Test Cases End -- //
finished
